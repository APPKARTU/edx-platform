sudo: required

language: python
python:
  - "2.7"
  
services:
  - docker
  
env:
  global:
    - CACHE_DIR=$HOME/.cache/docker
    - CACHE_FILE_DEVSTACK=$CACHE_DIR/devstack.tar.gz
  # matrix:
  #   - TEST_SUITE="quality"
  #   - TEST_SUITE="lms-unit" SHARD=1
  #   - TEST_SUITE="lms-unit" SHARD=2
  #   - TEST_SUITE="lms-unit" SHARD=3
  #   - TEST_SUITE="lms-unit" SHARD=4
  #   - TEST_SUITE="cms-unit"
  #   - TEST_SUITE="commonlib-unit"
  #   - TEST_SUITE="js-unit"

cache:
  directories:
  - $CACHE_DIR

branches:
  only:
  - master
  - oxa/master.fic
  - oxa/dev.fic
  - oxa/dev.fic-hotfix
  - oxa/dev.fic-quality
  - oxa/ci
  - oxa/ci-docker
  - oxa/ci-docker-qual
  - oxa/ci-docker-build-stages

before_install:
  - sudo apt-get update && sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-engine
  - export REPO=oxacontainerregistry.azurecr.io/ci/devstack
  - docker pull $(REPO):$(TRAVIS_BRANCH)

install:
  - docker run -d --name devstack --add-host "localhost preview.localhost":127.0.0.1 --security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro -e TEST_SUITE="$TEST_SUITE" -e SHARD="$SHARD" -e CODE_COV_TOKEN="$CODE_COV_TOKEN" -t oxacontainerregistry.azurecr.io/ci/devstack
  - docker ps -a
  # Prepare cgroup on the host at /tmp/cgroup to avoid error: "failed to connect to bus: no such file or directory"
  - sudo mkdir -p /tmp/cgroup/systemd && sudo mount -t cgroup systemd /tmp/cgroup/systemd -o ro,noexec,nosuid,nodev,none,name=systemd
  - docker build --cache-from $(REPO):$(TRAVIS_BRANCH) -t $(REPO):$(TRAVIS_COMMIT) .
  
before_script:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - sleep 3

stages:
  - 'prepare cache'
  - 'test'
  - 'acceptance test'

jobs:
  allow_failures:
    - env: ACCEPTANCE_TESTS=true
  include:
    - stage: precache
      script: true
    - stage: test
      env: TEST_SUITE="quality"
      script: ./scripts/docker-run-tests.sh
    - stage: test
      env: TEST_SUITE="lms-unit" SHARD=1
      script: ./scripts/docker-run-tests.sh
    - stage: test
      env: TEST_SUITE="lms-unit" SHARD=2
      script: ./scripts/docker-run-tests.sh
    - stage: test
      env: TEST_SUITE="lms-unit" SHARD=3
      script: ./scripts/docker-run-tests.sh
    - stage: test
      env: TEST_SUITE="lms-unit" SHARD=4
      script: ./scripts/docker-run-tests.sh
    - stage: test
      env: TEST_SUITE="cms-unit"
      script: ./scripts/docker-run-tests.sh
    - stage: test
      env: TEST_SUITE="commonlib-unit"
      script: ./scripts/docker-run-tests.sh
    - stage: test
      env: TEST_SUITE="js-unit"
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="lms-acceptance"
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="cms-acceptance"
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="bok-choy" SHARD=2
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="bok-choy" SHARD=3
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="bok-choy" SHARD=4
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="bok-choy" SHARD=7
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="bok-choy" SHARD=8
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="bok-choy" SHARD=9
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="bok-choy" SHARD=10
      script: ./scripts/docker-run-tests.sh
    - stage: 'acceptance'
      env: TEST_SUITE="bok-choy" SHARD=11
      script: ./scripts/docker-run-tests.sh
    - stage: 'deploy'
      script: echo 'deploying'

after_success:
  - ./scripts/docker-report.sh

dist: trusty
